#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require_relative 'actions_types'

module Actions
  class Client
    include ::Thrift::Client

    def actualizarAnalisis(analisis)
      send_actualizarAnalisis(analisis)
      return recv_actualizarAnalisis()
    end

    def send_actualizarAnalisis(analisis)
      send_message('actualizarAnalisis', ActualizarAnalisis_args, :analisis => analisis)
    end

    def recv_actualizarAnalisis()
      result = receive_message(ActualizarAnalisis_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'actualizarAnalisis failed: unknown result')
    end

    def actualizarDoctor(doctor)
      send_actualizarDoctor(doctor)
      return recv_actualizarDoctor()
    end

    def send_actualizarDoctor(doctor)
      send_message('actualizarDoctor', ActualizarDoctor_args, :doctor => doctor)
    end

    def recv_actualizarDoctor()
      result = receive_message(ActualizarDoctor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'actualizarDoctor failed: unknown result')
    end

    def actualizarPaciente(paciente)
      send_actualizarPaciente(paciente)
      return recv_actualizarPaciente()
    end

    def send_actualizarPaciente(paciente)
      send_message('actualizarPaciente', ActualizarPaciente_args, :paciente => paciente)
    end

    def recv_actualizarPaciente()
      result = receive_message(ActualizarPaciente_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'actualizarPaciente failed: unknown result')
    end

    def borrarAnalisis(claveAnalisis)
      send_borrarAnalisis(claveAnalisis)
      return recv_borrarAnalisis()
    end

    def send_borrarAnalisis(claveAnalisis)
      send_message('borrarAnalisis', BorrarAnalisis_args, :claveAnalisis => claveAnalisis)
    end

    def recv_borrarAnalisis()
      result = receive_message(BorrarAnalisis_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'borrarAnalisis failed: unknown result')
    end

    def borrarDoctor(claveDoctor)
      send_borrarDoctor(claveDoctor)
      return recv_borrarDoctor()
    end

    def send_borrarDoctor(claveDoctor)
      send_message('borrarDoctor', BorrarDoctor_args, :claveDoctor => claveDoctor)
    end

    def recv_borrarDoctor()
      result = receive_message(BorrarDoctor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'borrarDoctor failed: unknown result')
    end

    def borrarPaciente(clavePaciente)
      send_borrarPaciente(clavePaciente)
      return recv_borrarPaciente()
    end

    def send_borrarPaciente(clavePaciente)
      send_message('borrarPaciente', BorrarPaciente_args, :clavePaciente => clavePaciente)
    end

    def recv_borrarPaciente()
      result = receive_message(BorrarPaciente_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'borrarPaciente failed: unknown result')
    end

    def capturarAnalisis(analisis)
      send_capturarAnalisis(analisis)
      return recv_capturarAnalisis()
    end

    def send_capturarAnalisis(analisis)
      send_message('capturarAnalisis', CapturarAnalisis_args, :analisis => analisis)
    end

    def recv_capturarAnalisis()
      result = receive_message(CapturarAnalisis_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'capturarAnalisis failed: unknown result')
    end

    def capturarDoctor(doctor)
      send_capturarDoctor(doctor)
      return recv_capturarDoctor()
    end

    def send_capturarDoctor(doctor)
      send_message('capturarDoctor', CapturarDoctor_args, :doctor => doctor)
    end

    def recv_capturarDoctor()
      result = receive_message(CapturarDoctor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'capturarDoctor failed: unknown result')
    end

    def capturarPaciente(paciente)
      send_capturarPaciente(paciente)
      return recv_capturarPaciente()
    end

    def send_capturarPaciente(paciente)
      send_message('capturarPaciente', CapturarPaciente_args, :paciente => paciente)
    end

    def recv_capturarPaciente()
      result = receive_message(CapturarPaciente_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'capturarPaciente failed: unknown result')
    end

    def capturarAtiende(atiende)
      send_capturarAtiende(atiende)
      return recv_capturarAtiende()
    end

    def send_capturarAtiende(atiende)
      send_message('capturarAtiende', CapturarAtiende_args, :atiende => atiende)
    end

    def recv_capturarAtiende()
      result = receive_message(CapturarAtiende_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'capturarAtiende failed: unknown result')
    end

    def capturarSeRealiza(seRealiza)
      send_capturarSeRealiza(seRealiza)
      return recv_capturarSeRealiza()
    end

    def send_capturarSeRealiza(seRealiza)
      send_message('capturarSeRealiza', CapturarSeRealiza_args, :seRealiza => seRealiza)
    end

    def recv_capturarSeRealiza()
      result = receive_message(CapturarSeRealiza_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'capturarSeRealiza failed: unknown result')
    end

    def consultarAnalisis()
      send_consultarAnalisis()
      return recv_consultarAnalisis()
    end

    def send_consultarAnalisis()
      send_message('consultarAnalisis', ConsultarAnalisis_args)
    end

    def recv_consultarAnalisis()
      result = receive_message(ConsultarAnalisis_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarAnalisis failed: unknown result')
    end

    def consultarAtiende()
      send_consultarAtiende()
      return recv_consultarAtiende()
    end

    def send_consultarAtiende()
      send_message('consultarAtiende', ConsultarAtiende_args)
    end

    def recv_consultarAtiende()
      result = receive_message(ConsultarAtiende_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarAtiende failed: unknown result')
    end

    def consultarDoctores()
      send_consultarDoctores()
      return recv_consultarDoctores()
    end

    def send_consultarDoctores()
      send_message('consultarDoctores', ConsultarDoctores_args)
    end

    def recv_consultarDoctores()
      result = receive_message(ConsultarDoctores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarDoctores failed: unknown result')
    end

    def consultarPacientes()
      send_consultarPacientes()
      return recv_consultarPacientes()
    end

    def send_consultarPacientes()
      send_message('consultarPacientes', ConsultarPacientes_args)
    end

    def recv_consultarPacientes()
      result = receive_message(ConsultarPacientes_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarPacientes failed: unknown result')
    end

    def consultarSeRealiza()
      send_consultarSeRealiza()
      return recv_consultarSeRealiza()
    end

    def send_consultarSeRealiza()
      send_message('consultarSeRealiza', ConsultarSeRealiza_args)
    end

    def recv_consultarSeRealiza()
      result = receive_message(ConsultarSeRealiza_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarSeRealiza failed: unknown result')
    end

    def consultarAnalisisClave(clave)
      send_consultarAnalisisClave(clave)
      return recv_consultarAnalisisClave()
    end

    def send_consultarAnalisisClave(clave)
      send_message('consultarAnalisisClave', ConsultarAnalisisClave_args, :clave => clave)
    end

    def recv_consultarAnalisisClave()
      result = receive_message(ConsultarAnalisisClave_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarAnalisisClave failed: unknown result')
    end

    def consultarPacienteClave(clave)
      send_consultarPacienteClave(clave)
      return recv_consultarPacienteClave()
    end

    def send_consultarPacienteClave(clave)
      send_message('consultarPacienteClave', ConsultarPacienteClave_args, :clave => clave)
    end

    def recv_consultarPacienteClave()
      result = receive_message(ConsultarPacienteClave_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarPacienteClave failed: unknown result')
    end

    def consultarDoctorClave(clave)
      send_consultarDoctorClave(clave)
      return recv_consultarDoctorClave()
    end

    def send_consultarDoctorClave(clave)
      send_message('consultarDoctorClave', ConsultarDoctorClave_args, :clave => clave)
    end

    def recv_consultarDoctorClave()
      result = receive_message(ConsultarDoctorClave_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarDoctorClave failed: unknown result')
    end

    def consultarAnalisisTipo(tipo)
      send_consultarAnalisisTipo(tipo)
      return recv_consultarAnalisisTipo()
    end

    def send_consultarAnalisisTipo(tipo)
      send_message('consultarAnalisisTipo', ConsultarAnalisisTipo_args, :tipo => tipo)
    end

    def recv_consultarAnalisisTipo()
      result = receive_message(ConsultarAnalisisTipo_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarAnalisisTipo failed: unknown result')
    end

    def consultarDoctoresEspecialidad(especialidad)
      send_consultarDoctoresEspecialidad(especialidad)
      return recv_consultarDoctoresEspecialidad()
    end

    def send_consultarDoctoresEspecialidad(especialidad)
      send_message('consultarDoctoresEspecialidad', ConsultarDoctoresEspecialidad_args, :especialidad => especialidad)
    end

    def recv_consultarDoctoresEspecialidad()
      result = receive_message(ConsultarDoctoresEspecialidad_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarDoctoresEspecialidad failed: unknown result')
    end

    def generarReporteAnalisisPaciente(clavePaciente)
      send_generarReporteAnalisisPaciente(clavePaciente)
      return recv_generarReporteAnalisisPaciente()
    end

    def send_generarReporteAnalisisPaciente(clavePaciente)
      send_message('generarReporteAnalisisPaciente', GenerarReporteAnalisisPaciente_args, :clavePaciente => clavePaciente)
    end

    def recv_generarReporteAnalisisPaciente()
      result = receive_message(GenerarReporteAnalisisPaciente_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generarReporteAnalisisPaciente failed: unknown result')
    end

    def generarReportePacientesAnalisis(claveAnalisis)
      send_generarReportePacientesAnalisis(claveAnalisis)
      return recv_generarReportePacientesAnalisis()
    end

    def send_generarReportePacientesAnalisis(claveAnalisis)
      send_message('generarReportePacientesAnalisis', GenerarReportePacientesAnalisis_args, :claveAnalisis => claveAnalisis)
    end

    def recv_generarReportePacientesAnalisis()
      result = receive_message(GenerarReportePacientesAnalisis_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generarReportePacientesAnalisis failed: unknown result')
    end

    def generarReporteDoctoresPaciente(clavePaciente)
      send_generarReporteDoctoresPaciente(clavePaciente)
      return recv_generarReporteDoctoresPaciente()
    end

    def send_generarReporteDoctoresPaciente(clavePaciente)
      send_message('generarReporteDoctoresPaciente', GenerarReporteDoctoresPaciente_args, :clavePaciente => clavePaciente)
    end

    def recv_generarReporteDoctoresPaciente()
      result = receive_message(GenerarReporteDoctoresPaciente_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generarReporteDoctoresPaciente failed: unknown result')
    end

    def generarReportePacientesDoctor(claveDoctor)
      send_generarReportePacientesDoctor(claveDoctor)
      return recv_generarReportePacientesDoctor()
    end

    def send_generarReportePacientesDoctor(claveDoctor)
      send_message('generarReportePacientesDoctor', GenerarReportePacientesDoctor_args, :claveDoctor => claveDoctor)
    end

    def recv_generarReportePacientesDoctor()
      result = receive_message(GenerarReportePacientesDoctor_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'generarReportePacientesDoctor failed: unknown result')
    end

    def consultarEspecialidades()
      send_consultarEspecialidades()
      return recv_consultarEspecialidades()
    end

    def send_consultarEspecialidades()
      send_message('consultarEspecialidades', ConsultarEspecialidades_args)
    end

    def recv_consultarEspecialidades()
      result = receive_message(ConsultarEspecialidades_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'consultarEspecialidades failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_actualizarAnalisis(seqid, iprot, oprot)
      args = read_args(iprot, ActualizarAnalisis_args)
      result = ActualizarAnalisis_result.new()
      result.success = @handler.actualizarAnalisis(args.analisis)
      write_result(result, oprot, 'actualizarAnalisis', seqid)
    end

    def process_actualizarDoctor(seqid, iprot, oprot)
      args = read_args(iprot, ActualizarDoctor_args)
      result = ActualizarDoctor_result.new()
      result.success = @handler.actualizarDoctor(args.doctor)
      write_result(result, oprot, 'actualizarDoctor', seqid)
    end

    def process_actualizarPaciente(seqid, iprot, oprot)
      args = read_args(iprot, ActualizarPaciente_args)
      result = ActualizarPaciente_result.new()
      result.success = @handler.actualizarPaciente(args.paciente)
      write_result(result, oprot, 'actualizarPaciente', seqid)
    end

    def process_borrarAnalisis(seqid, iprot, oprot)
      args = read_args(iprot, BorrarAnalisis_args)
      result = BorrarAnalisis_result.new()
      result.success = @handler.borrarAnalisis(args.claveAnalisis)
      write_result(result, oprot, 'borrarAnalisis', seqid)
    end

    def process_borrarDoctor(seqid, iprot, oprot)
      args = read_args(iprot, BorrarDoctor_args)
      result = BorrarDoctor_result.new()
      result.success = @handler.borrarDoctor(args.claveDoctor)
      write_result(result, oprot, 'borrarDoctor', seqid)
    end

    def process_borrarPaciente(seqid, iprot, oprot)
      args = read_args(iprot, BorrarPaciente_args)
      result = BorrarPaciente_result.new()
      result.success = @handler.borrarPaciente(args.clavePaciente)
      write_result(result, oprot, 'borrarPaciente', seqid)
    end

    def process_capturarAnalisis(seqid, iprot, oprot)
      args = read_args(iprot, CapturarAnalisis_args)
      result = CapturarAnalisis_result.new()
      result.success = @handler.capturarAnalisis(args.analisis)
      write_result(result, oprot, 'capturarAnalisis', seqid)
    end

    def process_capturarDoctor(seqid, iprot, oprot)
      args = read_args(iprot, CapturarDoctor_args)
      result = CapturarDoctor_result.new()
      result.success = @handler.capturarDoctor(args.doctor)
      write_result(result, oprot, 'capturarDoctor', seqid)
    end

    def process_capturarPaciente(seqid, iprot, oprot)
      args = read_args(iprot, CapturarPaciente_args)
      result = CapturarPaciente_result.new()
      result.success = @handler.capturarPaciente(args.paciente)
      write_result(result, oprot, 'capturarPaciente', seqid)
    end

    def process_capturarAtiende(seqid, iprot, oprot)
      args = read_args(iprot, CapturarAtiende_args)
      result = CapturarAtiende_result.new()
      result.success = @handler.capturarAtiende(args.atiende)
      write_result(result, oprot, 'capturarAtiende', seqid)
    end

    def process_capturarSeRealiza(seqid, iprot, oprot)
      args = read_args(iprot, CapturarSeRealiza_args)
      result = CapturarSeRealiza_result.new()
      result.success = @handler.capturarSeRealiza(args.seRealiza)
      write_result(result, oprot, 'capturarSeRealiza', seqid)
    end

    def process_consultarAnalisis(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarAnalisis_args)
      result = ConsultarAnalisis_result.new()
      result.success = @handler.consultarAnalisis()
      write_result(result, oprot, 'consultarAnalisis', seqid)
    end

    def process_consultarAtiende(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarAtiende_args)
      result = ConsultarAtiende_result.new()
      result.success = @handler.consultarAtiende()
      write_result(result, oprot, 'consultarAtiende', seqid)
    end

    def process_consultarDoctores(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarDoctores_args)
      result = ConsultarDoctores_result.new()
      result.success = @handler.consultarDoctores()
      write_result(result, oprot, 'consultarDoctores', seqid)
    end

    def process_consultarPacientes(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarPacientes_args)
      result = ConsultarPacientes_result.new()
      result.success = @handler.consultarPacientes()
      write_result(result, oprot, 'consultarPacientes', seqid)
    end

    def process_consultarSeRealiza(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarSeRealiza_args)
      result = ConsultarSeRealiza_result.new()
      result.success = @handler.consultarSeRealiza()
      write_result(result, oprot, 'consultarSeRealiza', seqid)
    end

    def process_consultarAnalisisClave(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarAnalisisClave_args)
      result = ConsultarAnalisisClave_result.new()
      result.success = @handler.consultarAnalisisClave(args.clave)
      write_result(result, oprot, 'consultarAnalisisClave', seqid)
    end

    def process_consultarPacienteClave(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarPacienteClave_args)
      result = ConsultarPacienteClave_result.new()
      result.success = @handler.consultarPacienteClave(args.clave)
      write_result(result, oprot, 'consultarPacienteClave', seqid)
    end

    def process_consultarDoctorClave(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarDoctorClave_args)
      result = ConsultarDoctorClave_result.new()
      result.success = @handler.consultarDoctorClave(args.clave)
      write_result(result, oprot, 'consultarDoctorClave', seqid)
    end

    def process_consultarAnalisisTipo(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarAnalisisTipo_args)
      result = ConsultarAnalisisTipo_result.new()
      result.success = @handler.consultarAnalisisTipo(args.tipo)
      write_result(result, oprot, 'consultarAnalisisTipo', seqid)
    end

    def process_consultarDoctoresEspecialidad(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarDoctoresEspecialidad_args)
      result = ConsultarDoctoresEspecialidad_result.new()
      result.success = @handler.consultarDoctoresEspecialidad(args.especialidad)
      write_result(result, oprot, 'consultarDoctoresEspecialidad', seqid)
    end

    def process_generarReporteAnalisisPaciente(seqid, iprot, oprot)
      args = read_args(iprot, GenerarReporteAnalisisPaciente_args)
      result = GenerarReporteAnalisisPaciente_result.new()
      result.success = @handler.generarReporteAnalisisPaciente(args.clavePaciente)
      write_result(result, oprot, 'generarReporteAnalisisPaciente', seqid)
    end

    def process_generarReportePacientesAnalisis(seqid, iprot, oprot)
      args = read_args(iprot, GenerarReportePacientesAnalisis_args)
      result = GenerarReportePacientesAnalisis_result.new()
      result.success = @handler.generarReportePacientesAnalisis(args.claveAnalisis)
      write_result(result, oprot, 'generarReportePacientesAnalisis', seqid)
    end

    def process_generarReporteDoctoresPaciente(seqid, iprot, oprot)
      args = read_args(iprot, GenerarReporteDoctoresPaciente_args)
      result = GenerarReporteDoctoresPaciente_result.new()
      result.success = @handler.generarReporteDoctoresPaciente(args.clavePaciente)
      write_result(result, oprot, 'generarReporteDoctoresPaciente', seqid)
    end

    def process_generarReportePacientesDoctor(seqid, iprot, oprot)
      args = read_args(iprot, GenerarReportePacientesDoctor_args)
      result = GenerarReportePacientesDoctor_result.new()
      result.success = @handler.generarReportePacientesDoctor(args.claveDoctor)
      write_result(result, oprot, 'generarReportePacientesDoctor', seqid)
    end

    def process_consultarEspecialidades(seqid, iprot, oprot)
      args = read_args(iprot, ConsultarEspecialidades_args)
      result = ConsultarEspecialidades_result.new()
      result.success = @handler.consultarEspecialidades()
      write_result(result, oprot, 'consultarEspecialidades', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class ActualizarAnalisis_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ANALISIS = 1

    FIELDS = {
      ANALISIS => {:type => ::Thrift::Types::STRUCT, :name => 'analisis', :class => ::AnalisisClinico}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarAnalisis_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarDoctor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DOCTOR = 1

    FIELDS = {
      DOCTOR => {:type => ::Thrift::Types::STRUCT, :name => 'doctor', :class => ::Doctor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarDoctor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarPaciente_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PACIENTE = 1

    FIELDS = {
      PACIENTE => {:type => ::Thrift::Types::STRUCT, :name => 'paciente', :class => ::Paciente}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ActualizarPaciente_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BorrarAnalisis_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVEANALISIS = 1

    FIELDS = {
      CLAVEANALISIS => {:type => ::Thrift::Types::STRING, :name => 'claveAnalisis'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BorrarAnalisis_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BorrarDoctor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVEDOCTOR = 1

    FIELDS = {
      CLAVEDOCTOR => {:type => ::Thrift::Types::STRING, :name => 'claveDoctor'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BorrarDoctor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BorrarPaciente_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVEPACIENTE = 1

    FIELDS = {
      CLAVEPACIENTE => {:type => ::Thrift::Types::STRING, :name => 'clavePaciente'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class BorrarPaciente_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarAnalisis_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ANALISIS = 1

    FIELDS = {
      ANALISIS => {:type => ::Thrift::Types::STRUCT, :name => 'analisis', :class => ::AnalisisClinico}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarAnalisis_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarDoctor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    DOCTOR = 1

    FIELDS = {
      DOCTOR => {:type => ::Thrift::Types::STRUCT, :name => 'doctor', :class => ::Doctor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarDoctor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarPaciente_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PACIENTE = 1

    FIELDS = {
      PACIENTE => {:type => ::Thrift::Types::STRUCT, :name => 'paciente', :class => ::Paciente}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarPaciente_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarAtiende_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ATIENDE = 1

    FIELDS = {
      ATIENDE => {:type => ::Thrift::Types::STRUCT, :name => 'atiende', :class => ::Atiende}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarAtiende_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarSeRealiza_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SEREALIZA = 1

    FIELDS = {
      SEREALIZA => {:type => ::Thrift::Types::STRUCT, :name => 'seRealiza', :class => ::SeRealiza}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class CapturarSeRealiza_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAnalisis_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAnalisis_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::AnalisisClinico}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAtiende_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAtiende_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Atiende}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarDoctores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarDoctores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Doctor}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarPacientes_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarPacientes_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Paciente}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarSeRealiza_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarSeRealiza_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::SeRealiza}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAnalisisClave_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVE = 1

    FIELDS = {
      CLAVE => {:type => ::Thrift::Types::STRING, :name => 'clave'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAnalisisClave_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::AnalisisClinico}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarPacienteClave_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVE = 1

    FIELDS = {
      CLAVE => {:type => ::Thrift::Types::STRING, :name => 'clave'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarPacienteClave_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Paciente}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarDoctorClave_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVE = 1

    FIELDS = {
      CLAVE => {:type => ::Thrift::Types::STRING, :name => 'clave'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarDoctorClave_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Doctor}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAnalisisTipo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    TIPO = 1

    FIELDS = {
      TIPO => {:type => ::Thrift::Types::STRING, :name => 'tipo'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarAnalisisTipo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::AnalisisClinico}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarDoctoresEspecialidad_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    ESPECIALIDAD = 1

    FIELDS = {
      ESPECIALIDAD => {:type => ::Thrift::Types::STRING, :name => 'especialidad'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarDoctoresEspecialidad_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Doctor}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReporteAnalisisPaciente_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVEPACIENTE = 1

    FIELDS = {
      CLAVEPACIENTE => {:type => ::Thrift::Types::STRING, :name => 'clavePaciente'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReporteAnalisisPaciente_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ReporteAnalisisPaciente}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReportePacientesAnalisis_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVEANALISIS = 1

    FIELDS = {
      CLAVEANALISIS => {:type => ::Thrift::Types::STRING, :name => 'claveAnalisis'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReportePacientesAnalisis_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ReportePacientesAnalisis}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReporteDoctoresPaciente_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVEPACIENTE = 1

    FIELDS = {
      CLAVEPACIENTE => {:type => ::Thrift::Types::STRING, :name => 'clavePaciente'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReporteDoctoresPaciente_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ReporteDoctoresPaciente}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReportePacientesDoctor_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    CLAVEDOCTOR = 1

    FIELDS = {
      CLAVEDOCTOR => {:type => ::Thrift::Types::STRING, :name => 'claveDoctor'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class GenerarReportePacientesDoctor_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::ReportePacientesDoctor}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarEspecialidades_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class ConsultarEspecialidades_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRING}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

